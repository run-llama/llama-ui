// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};

export type Handler = {
    handler_id: string;
    workflow_name: string;
    run_id?: string | null;
    status: 'running' | 'completed' | 'failed' | 'cancelled';
    started_at: string;
    updated_at?: string | null;
    completed_at?: string | null;
    error?: string | null;
    /**
     * Workflow result value
     */
    result?: unknown;
};

export type HandlersList = {
    handlers: Array<Handler>;
};

export type GetWorkflowsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workflows';
};

export type GetWorkflowsResponses = {
    /**
     * List of workflows
     */
    200: {
        workflows: Array<string>;
    };
};

export type GetWorkflowsResponse = GetWorkflowsResponses[keyof GetWorkflowsResponses];

export type PostWorkflowsByNameRunData = {
    body?: {
        /**
         * Plain JSON object representing the start event (e.g., {"message": "..."}).
         */
        start_event?: {
            [key: string]: unknown;
        };
        /**
         * Serialized workflow Context.
         */
        context?: {
            [key: string]: unknown;
        };
        /**
         * Workflow handler identifier to continue from a previous completed run.
         */
        handler_id?: string;
        /**
         * Additional keyword arguments for the workflow.
         */
        kwargs?: {
            [key: string]: unknown;
        };
    };
    path: {
        /**
         * Registered workflow name.
         */
        name: string;
    };
    query?: never;
    url: '/workflows/{name}/run';
};

export type PostWorkflowsByNameRunErrors = {
    /**
     * Invalid start_event payload
     */
    400: unknown;
    /**
     * Workflow or handler identifier not found
     */
    404: unknown;
    /**
     * Error running workflow or invalid request body
     */
    500: unknown;
};

export type PostWorkflowsByNameRunResponses = {
    /**
     * Workflow completed successfully
     */
    200: Handler;
};

export type PostWorkflowsByNameRunResponse = PostWorkflowsByNameRunResponses[keyof PostWorkflowsByNameRunResponses];

export type PostWorkflowsByNameRunNowaitData = {
    body?: {
        /**
         * Plain JSON object representing the start event (e.g., {"message": "..."}).
         */
        start_event?: {
            [key: string]: unknown;
        };
        /**
         * Serialized workflow Context.
         */
        context?: {
            [key: string]: unknown;
        };
        /**
         * Workflow handler identifier to continue from a previous completed run.
         */
        handler_id?: string;
        /**
         * Additional keyword arguments for the workflow.
         */
        kwargs?: {
            [key: string]: unknown;
        };
    };
    path: {
        /**
         * Registered workflow name.
         */
        name: string;
    };
    query?: never;
    url: '/workflows/{name}/run-nowait';
};

export type PostWorkflowsByNameRunNowaitErrors = {
    /**
     * Invalid start_event payload
     */
    400: unknown;
    /**
     * Workflow or handler identifier not found
     */
    404: unknown;
};

export type PostWorkflowsByNameRunNowaitResponses = {
    /**
     * Workflow started
     */
    200: Handler;
};

export type PostWorkflowsByNameRunNowaitResponse = PostWorkflowsByNameRunNowaitResponses[keyof PostWorkflowsByNameRunNowaitResponses];

export type GetWorkflowsByNameSchemaData = {
    body?: never;
    path: {
        /**
         * Registered workflow name.
         */
        name: string;
    };
    query?: never;
    url: '/workflows/{name}/schema';
};

export type GetWorkflowsByNameSchemaErrors = {
    /**
     * Workflow not found
     */
    404: unknown;
    /**
     * Error while getting the JSON schema for the start or stop event
     */
    500: unknown;
};

export type GetWorkflowsByNameSchemaResponses = {
    /**
     * JSON schema successfully retrieved for start event
     */
    200: {
        /**
         * JSON schema for the start event
         */
        start: unknown;
        /**
         * JSON schema for the stop event
         */
        stop: unknown;
    };
};

export type GetWorkflowsByNameSchemaResponse = GetWorkflowsByNameSchemaResponses[keyof GetWorkflowsByNameSchemaResponses];

export type GetResultsByHandlerIdData = {
    body?: never;
    path: {
        /**
         * Workflow run identifier returned from the no-wait run endpoint.
         */
        handler_id: string;
    };
    query?: never;
    url: '/results/{handler_id}';
};

export type GetResultsByHandlerIdErrors = {
    /**
     * Handler not found
     */
    404: unknown;
    /**
     * Error computing result
     */
    500: string;
};

export type GetResultsByHandlerIdError = GetResultsByHandlerIdErrors[keyof GetResultsByHandlerIdErrors];

export type GetResultsByHandlerIdResponses = {
    /**
     * Result is available
     */
    200: Handler;
    /**
     * Result not ready yet
     */
    202: Handler;
};

export type GetResultsByHandlerIdResponse = GetResultsByHandlerIdResponses[keyof GetResultsByHandlerIdResponses];

export type GetEventsByHandlerIdData = {
    body?: never;
    path: {
        /**
         * Identifier returned from the no-wait run endpoint.
         */
        handler_id: string;
    };
    query?: {
        /**
         * If false, as NDJSON instead of Server-Sent Events.
         */
        sse?: boolean;
        /**
         * If true, include internal workflow events (e.g., step state changes).
         */
        include_internal?: boolean;
        /**
         * Timeout for acquiring the lock to iterate over the events.
         */
        acquire_timeout?: number;
    };
    url: '/events/{handler_id}';
};

export type GetEventsByHandlerIdErrors = {
    /**
     * Handler not found
     */
    404: unknown;
};

export type GetEventsByHandlerIdResponses = {
    /**
     * Server-Sent Events stream of event data.
     */
    200: {
        /**
         * The event value.
         */
        value: {
            [key: string]: unknown;
        };
        /**
         * The qualified name of the event.
         */
        qualified_name: string;
    };
};

export type GetEventsByHandlerIdResponse = GetEventsByHandlerIdResponses[keyof GetEventsByHandlerIdResponses];

export type PostEventsByHandlerIdData = {
    body: {
        /**
         * Serialized event in JSON format.
         */
        event: string;
        /**
         * Optional target step name. If not provided, event is sent to all steps.
         */
        step?: string;
    };
    path: {
        /**
         * Workflow handler identifier.
         */
        handler_id: string;
    };
    query?: never;
    url: '/events/{handler_id}';
};

export type PostEventsByHandlerIdErrors = {
    /**
     * Invalid event data
     */
    400: unknown;
    /**
     * Handler not found
     */
    404: unknown;
    /**
     * Workflow already completed
     */
    409: unknown;
};

export type PostEventsByHandlerIdResponses = {
    /**
     * Event sent successfully
     */
    200: {
        status: 'sent';
    };
};

export type PostEventsByHandlerIdResponse = PostEventsByHandlerIdResponses[keyof PostEventsByHandlerIdResponses];

export type GetHealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type GetHealthResponses = {
    /**
     * Successful health check
     */
    200: {
        status: string;
    };
};

export type GetHealthResponse = GetHealthResponses[keyof GetHealthResponses];

export type GetHandlersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handlers';
};

export type GetHandlersResponses = {
    /**
     * List of handlers
     */
    200: HandlersList;
};

export type GetHandlersResponse = GetHandlersResponses[keyof GetHandlersResponses];

export type PostHandlersByHandlerIdCancelData = {
    body?: never;
    path: {
        /**
         * Workflow handler identifier.
         */
        handler_id: string;
    };
    query?: {
        /**
         * If true, also deletes the handler from the store, otherwise updates the status to cancelled.
         */
        purge?: boolean;
    };
    url: '/handlers/{handler_id}/cancel';
};

export type PostHandlersByHandlerIdCancelErrors = {
    /**
     * Handler not found
     */
    404: unknown;
};

export type PostHandlersByHandlerIdCancelResponses = {
    /**
     * Handler cancelled and deleted or cancelled only
     */
    200: {
        status: 'deleted' | 'cancelled';
    };
};

export type PostHandlersByHandlerIdCancelResponse = PostHandlersByHandlerIdCancelResponses[keyof PostHandlersByHandlerIdCancelResponses];

export type GetWorkflowsByNameRepresentationData = {
    body?: never;
    path: {
        /**
         * Registered workflow name.
         */
        name: string;
    };
    query?: never;
    url: '/workflows/{name}/representation';
};

export type GetWorkflowsByNameRepresentationErrors = {
    /**
     * Workflow not found
     */
    404: unknown;
    /**
     * Error while getting JSON workflow representation
     */
    500: unknown;
};

export type GetWorkflowsByNameRepresentationResponses = {
    /**
     * JSON representation successfully retrieved
     */
    200: {
        /**
         * the elements of the JSON representation of the workflow
         */
        graph: unknown;
    };
};

export type GetWorkflowsByNameRepresentationResponse = GetWorkflowsByNameRepresentationResponses[keyof GetWorkflowsByNameRepresentationResponses];

export type GetWorkflowsByNameEventsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Name of the workflow to list events for
         */
        workflow_name: string;
    };
    url: '/workflows/{name}/events';
};

export type GetWorkflowsByNameEventsResponses = {
    /**
     * List of workflow event schemas
     */
    200: {
        events: Array<{
            name: string;
            schema: {
                [key: string]: unknown;
            };
        }>;
    };
};

export type GetWorkflowsByNameEventsResponse = GetWorkflowsByNameEventsResponses[keyof GetWorkflowsByNameEventsResponses];
