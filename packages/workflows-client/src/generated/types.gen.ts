// This file is auto-generated by @hey-api/openapi-ts

export type GetWorkflowsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workflows';
};

export type GetWorkflowsResponses = {
    /**
     * List of workflows
     */
    200: {
        workflows: Array<string>;
    };
};

export type GetWorkflowsResponse = GetWorkflowsResponses[keyof GetWorkflowsResponses];

export type PostWorkflowsByNameRunData = {
    body?: {
        /**
         * Serialized StartEvent in JSON.
         */
        start_event?: string;
        /**
         * Serialized workflow Context.
         */
        context?: {
            [key: string]: unknown;
        };
        /**
         * Additional keyword arguments for the workflow.
         */
        kwargs?: {
            [key: string]: unknown;
        };
    };
    path: {
        /**
         * Registered workflow name.
         */
        name: string;
    };
    query?: never;
    url: '/workflows/{name}/run';
};

export type PostWorkflowsByNameRunErrors = {
    /**
     * Invalid start_event payload
     */
    400: unknown;
    /**
     * Workflow not found
     */
    404: unknown;
    /**
     * Error running workflow or invalid request body
     */
    500: unknown;
};

export type PostWorkflowsByNameRunResponses = {
    /**
     * Workflow completed successfully
     */
    200: {
        /**
         * Workflow result value
         */
        result: unknown;
    };
};

export type PostWorkflowsByNameRunResponse = PostWorkflowsByNameRunResponses[keyof PostWorkflowsByNameRunResponses];

export type PostWorkflowsByNameRunNowaitData = {
    body?: {
        /**
         * Serialized StartEvent in JSON.
         */
        start_event?: string;
        /**
         * Serialized workflow Context.
         */
        context?: {
            [key: string]: unknown;
        };
        /**
         * Additional keyword arguments for the workflow.
         */
        kwargs?: {
            [key: string]: unknown;
        };
    };
    path: {
        /**
         * Registered workflow name.
         */
        name: string;
    };
    query?: never;
    url: '/workflows/{name}/run-nowait';
};

export type PostWorkflowsByNameRunNowaitErrors = {
    /**
     * Invalid start_event payload
     */
    400: unknown;
    /**
     * Workflow not found
     */
    404: unknown;
};

export type PostWorkflowsByNameRunNowaitResponses = {
    /**
     * Workflow started
     */
    200: {
        handler_id: string;
        status: 'started';
    };
};

export type PostWorkflowsByNameRunNowaitResponse = PostWorkflowsByNameRunNowaitResponses[keyof PostWorkflowsByNameRunNowaitResponses];

export type GetResultsByHandlerIdData = {
    body?: never;
    path: {
        /**
         * Workflow run identifier returned from the no-wait run endpoint.
         */
        handler_id: string;
    };
    query?: never;
    url: '/results/{handler_id}';
};

export type GetResultsByHandlerIdErrors = {
    /**
     * Handler not found
     */
    404: unknown;
    /**
     * Error computing result
     */
    500: unknown;
};

export type GetResultsByHandlerIdResponses = {
    /**
     * Result is available
     */
    200: {
        /**
         * Workflow result value
         */
        result: unknown;
    };
    /**
     * Result not ready yet
     */
    202: {
        [key: string]: unknown;
    };
};

export type GetResultsByHandlerIdResponse = GetResultsByHandlerIdResponses[keyof GetResultsByHandlerIdResponses];

export type GetEventsByHandlerIdData = {
    body?: never;
    path: {
        /**
         * Identifier returned from the no-wait run endpoint.
         */
        handler_id: string;
    };
    query?: {
        /**
         * If true, stream as text/event-stream instead of NDJSON.
         */
        sse?: boolean;
    };
    url: '/events/{handler_id}';
};

export type GetEventsByHandlerIdErrors = {
    /**
     * Handler not found
     */
    404: unknown;
};

export type GetEventsByHandlerIdResponses = {
    /**
     * Newline-delimited JSON stream of events.
     */
    200: string;
};

export type GetEventsByHandlerIdResponse = GetEventsByHandlerIdResponses[keyof GetEventsByHandlerIdResponses];

export type PostEventsByHandlerIdData = {
    body: {
        /**
         * Serialized event in JSON format.
         */
        event: string;
        /**
         * Optional target step name. If not provided, event is sent to all steps.
         */
        step?: string;
    };
    path: {
        /**
         * Workflow handler identifier.
         */
        handler_id: string;
    };
    query?: never;
    url: '/events/{handler_id}';
};

export type PostEventsByHandlerIdErrors = {
    /**
     * Invalid event data
     */
    400: unknown;
    /**
     * Handler not found
     */
    404: unknown;
    /**
     * Workflow already completed
     */
    409: unknown;
};

export type PostEventsByHandlerIdResponses = {
    /**
     * Event sent successfully
     */
    200: {
        status: 'sent';
    };
};

export type PostEventsByHandlerIdResponse = PostEventsByHandlerIdResponses[keyof PostEventsByHandlerIdResponses];

export type GetHealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type GetHealthResponses = {
    /**
     * Successful health check
     */
    200: {
        status: string;
    };
};

export type GetHealthResponse = GetHealthResponses[keyof GetHealthResponses];

export type GetHandlersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/handlers';
};

export type GetHandlersResponses = {
    /**
     * List of handlers
     */
    200: {
        handlers: Array<{
            handler_id?: string;
            result?: {
                [key: string]: unknown;
            };
            error?: {
                [key: string]: unknown;
            };
            status?: 'running' | 'completed' | 'failed';
        }>;
    };
};

export type GetHandlersResponse = GetHandlersResponses[keyof GetHandlersResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};
