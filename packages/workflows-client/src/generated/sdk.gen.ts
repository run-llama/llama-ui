// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { GetEventsByHandlerIdData, GetEventsByHandlerIdErrors, GetEventsByHandlerIdResponses, GetHandlersData, GetHandlersResponses, GetHealthData, GetHealthResponses, GetResultsByHandlerIdData, GetResultsByHandlerIdErrors, GetResultsByHandlerIdResponses, GetWorkflowsByNameEventsData, GetWorkflowsByNameEventsResponses, GetWorkflowsByNameRepresentationData, GetWorkflowsByNameRepresentationErrors, GetWorkflowsByNameRepresentationResponses, GetWorkflowsByNameSchemaData, GetWorkflowsByNameSchemaErrors, GetWorkflowsByNameSchemaResponses, GetWorkflowsData, GetWorkflowsResponses, PostEventsByHandlerIdData, PostEventsByHandlerIdErrors, PostEventsByHandlerIdResponses, PostHandlersByHandlerIdCancelData, PostHandlersByHandlerIdCancelErrors, PostHandlersByHandlerIdCancelResponses, PostWorkflowsByNameRunData, PostWorkflowsByNameRunErrors, PostWorkflowsByNameRunNowaitData, PostWorkflowsByNameRunNowaitErrors, PostWorkflowsByNameRunNowaitResponses, PostWorkflowsByNameRunResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List workflows
 * Returns the list of registered workflow names.
 */
export const getWorkflows = <ThrowOnError extends boolean = false>(options?: Options<GetWorkflowsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetWorkflowsResponses, unknown, ThrowOnError>({
        url: '/workflows',
        ...options
    });
};

/**
 * Run workflow (wait)
 * Runs the specified workflow synchronously and returns the final result.
 * The request body may include an optional serialized start event, an optional
 * context object, and optional keyword arguments passed to the workflow run.
 *
 */
export const postWorkflowsByNameRun = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowsByNameRunData, ThrowOnError>) => {
    return (options.client ?? client).post<PostWorkflowsByNameRunResponses, PostWorkflowsByNameRunErrors, ThrowOnError>({
        url: '/workflows/{name}/run',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Run workflow (no-wait)
 * Starts the specified workflow asynchronously and returns a handler identifier
 * which can be used to query results or stream events.
 *
 */
export const postWorkflowsByNameRunNowait = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowsByNameRunNowaitData, ThrowOnError>) => {
    return (options.client ?? client).post<PostWorkflowsByNameRunNowaitResponses, PostWorkflowsByNameRunNowaitErrors, ThrowOnError>({
        url: '/workflows/{name}/run-nowait',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get JSON schema for start event
 * Gets the JSON schema of the start and stop events from the specified workflow and returns it under "start" (start event) and "stop" (stop event)
 *
 */
export const getWorkflowsByNameSchema = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowsByNameSchemaData, ThrowOnError>) => {
    return (options.client ?? client).get<GetWorkflowsByNameSchemaResponses, GetWorkflowsByNameSchemaErrors, ThrowOnError>({
        url: '/workflows/{name}/schema',
        ...options
    });
};

/**
 * Get workflow result
 * Returns the final result of an asynchronously started workflow, if available
 */
export const getResultsByHandlerId = <ThrowOnError extends boolean = false>(options: Options<GetResultsByHandlerIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetResultsByHandlerIdResponses, GetResultsByHandlerIdErrors, ThrowOnError>({
        url: '/results/{handler_id}',
        ...options
    });
};

/**
 * Stream workflow events
 * Streams events produced by a workflow execution. Events are emitted as
 * newline-delimited JSON by default, or as Server-Sent Events when `sse=true`.
 * Event data is returned as an envelope that preserves backward-compatible fields
 * and adds metadata for type-safety on the client:
 * {
 * "__is_pydantic": true,
 * "value": <pydantic serialized value>,
 * "qualified_name": <python path to pydantic class>,  # deprecated, prefer `mro`
 * "mro": [<qualified class names from most to least specific>],
 * "origin": "builtin" | "user"
 * }
 *
 * Event queue is mutable. Elements are added to the queue by the workflow handler, and removed by any consumer of the queue.
 * The queue is protected by a lock that is acquired by the consumer, so only one consumer of the queue at a time is allowed.
 *
 */
export const getEventsByHandlerId = <ThrowOnError extends boolean = false>(options: Options<GetEventsByHandlerIdData, ThrowOnError>) => {
    return (options.client ?? client).sse.get<GetEventsByHandlerIdResponses, GetEventsByHandlerIdErrors, ThrowOnError>({
        url: '/events/{handler_id}',
        ...options
    });
};

/**
 * Send event to workflow
 * Sends an event to a running workflow's context.
 */
export const postEventsByHandlerId = <ThrowOnError extends boolean = false>(options: Options<PostEventsByHandlerIdData, ThrowOnError>) => {
    return (options.client ?? client).post<PostEventsByHandlerIdResponses, PostEventsByHandlerIdErrors, ThrowOnError>({
        url: '/events/{handler_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Health check
 * Returns the server health status.
 */
export const getHealth = <ThrowOnError extends boolean = false>(options?: Options<GetHealthData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetHealthResponses, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Get handlers
 * Returns all workflow handlers.
 */
export const getHandlers = <ThrowOnError extends boolean = false>(options?: Options<GetHandlersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetHandlersResponses, unknown, ThrowOnError>({
        url: '/handlers',
        ...options
    });
};

/**
 * Stop and delete handler
 * Stops a running workflow handler by cancelling its tasks. Optionally removes the
 * handler from the persistence store if purge=true.
 *
 */
export const postHandlersByHandlerIdCancel = <ThrowOnError extends boolean = false>(options: Options<PostHandlersByHandlerIdCancelData, ThrowOnError>) => {
    return (options.client ?? client).post<PostHandlersByHandlerIdCancelResponses, PostHandlersByHandlerIdCancelErrors, ThrowOnError>({
        url: '/handlers/{handler_id}/cancel',
        ...options
    });
};

/**
 * Get the representation of the workflow
 * Get the representation of the workflow as a directed graph in JSON format
 *
 */
export const getWorkflowsByNameRepresentation = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowsByNameRepresentationData, ThrowOnError>) => {
    return (options.client ?? client).get<GetWorkflowsByNameRepresentationResponses, GetWorkflowsByNameRepresentationErrors, ThrowOnError>({
        url: '/workflows/{name}/representation',
        ...options
    });
};

/**
 * List workflow events
 * Returns the list of registered workflow event schemas.
 */
export const getWorkflowsByNameEvents = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowsByNameEventsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetWorkflowsByNameEventsResponses, unknown, ThrowOnError>({
        url: '/workflows/{name}/events',
        ...options
    });
};
