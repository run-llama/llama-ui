// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetWorkflowsData, GetWorkflowsResponses, PostWorkflowsByNameRunData, PostWorkflowsByNameRunResponses, PostWorkflowsByNameRunErrors, PostWorkflowsByNameRunNowaitData, PostWorkflowsByNameRunNowaitResponses, PostWorkflowsByNameRunNowaitErrors, GetResultsByHandlerIdData, GetResultsByHandlerIdResponses, GetResultsByHandlerIdErrors, GetEventsByHandlerIdData, GetEventsByHandlerIdResponses, GetEventsByHandlerIdErrors, GetHealthData, GetHealthResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List workflows
 * Returns the list of registered workflow names.
 */
export const getWorkflows = <ThrowOnError extends boolean = false>(options?: Options<GetWorkflowsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorkflowsResponses, unknown, ThrowOnError>({
        url: '/workflows',
        ...options
    });
};

/**
 * Run workflow (wait)
 * Runs the specified workflow synchronously and returns the final result.
 * The request body may include an optional serialized start event, an optional
 * context object, and optional keyword arguments passed to the workflow run.
 *
 */
export const postWorkflowsByNameRun = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowsByNameRunData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkflowsByNameRunResponses, PostWorkflowsByNameRunErrors, ThrowOnError>({
        url: '/workflows/{name}/run',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Run workflow (no-wait)
 * Starts the specified workflow asynchronously and returns a handler identifier
 * which can be used to query results or stream events.
 *
 */
export const postWorkflowsByNameRunNowait = <ThrowOnError extends boolean = false>(options: Options<PostWorkflowsByNameRunNowaitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostWorkflowsByNameRunNowaitResponses, PostWorkflowsByNameRunNowaitErrors, ThrowOnError>({
        url: '/workflows/{name}/run-nowait',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get workflow result
 * Returns the final result of an asynchronously started workflow, if available
 */
export const getResultsByHandlerId = <ThrowOnError extends boolean = false>(options: Options<GetResultsByHandlerIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetResultsByHandlerIdResponses, GetResultsByHandlerIdErrors, ThrowOnError>({
        url: '/results/{handler_id}',
        ...options
    });
};

/**
 * Stream workflow events
 * Streams events produced by a workflow execution. Events are emitted as
 * newline-delimited JSON by default, or as Server-Sent Events when `sse=true`.
 * Event data is formatted according to llama-index's json serializer. For
 * pydantic serializable python types, it returns:
 * {
 * "__is_pydantic": True,
 * "value": <pydantic serialized value>,
 * "qualified_name": <python path to pydantic class>
 * }
 *
 */
export const getEventsByHandlerId = <ThrowOnError extends boolean = false>(options: Options<GetEventsByHandlerIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEventsByHandlerIdResponses, GetEventsByHandlerIdErrors, ThrowOnError>({
        url: '/events/{handler_id}',
        ...options
    });
};

/**
 * Health check
 * Returns the server health status.
 */
export const getHealth = <ThrowOnError extends boolean = false>(options?: Options<GetHealthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHealthResponses, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};