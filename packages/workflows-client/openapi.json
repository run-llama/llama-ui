{
  "openapi": "3.0.0",
  "info": {
    "title": "Workflows API",
    "version": "2.0.1"
  },
  "paths": {
    "/workflows": {
      "get": {
        "summary": "List workflows",
        "description": "Returns the list of registered workflow names.",
        "responses": {
          "200": {
            "description": "List of workflows",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "workflows": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "workflows"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/workflows/{name}/run": {
      "post": {
        "summary": "Run workflow (wait)",
        "description": "Runs the specified workflow synchronously and returns the final result.\nThe request body may include an optional serialized start event, an optional\ncontext object, and optional keyword arguments passed to the workflow run.\n",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Registered workflow name."
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "start_event": {
                    "type": "string",
                    "description": "Serialized StartEvent in JSON."
                  },
                  "context": {
                    "type": "object",
                    "description": "Serialized workflow Context."
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional keyword arguments for the workflow."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workflow completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "description": "Workflow result value"
                    }
                  },
                  "required": [
                    "result"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid start_event payload"
          },
          "404": {
            "description": "Workflow not found"
          },
          "500": {
            "description": "Error running workflow or invalid request body"
          }
        }
      }
    },
    "/workflows/{name}/run-nowait": {
      "post": {
        "summary": "Run workflow (no-wait)",
        "description": "Starts the specified workflow asynchronously and returns a handler identifier\nwhich can be used to query results or stream events.\n",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Registered workflow name."
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "start_event": {
                    "type": "string",
                    "description": "Serialized StartEvent in JSON."
                  },
                  "context": {
                    "type": "object",
                    "description": "Serialized workflow Context."
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional keyword arguments for the workflow."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workflow started",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "handler_id": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "started"
                      ]
                    }
                  },
                  "required": [
                    "handler_id",
                    "status"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid start_event payload"
          },
          "404": {
            "description": "Workflow not found"
          }
        }
      }
    },
    "/results/{handler_id}": {
      "get": {
        "summary": "Get workflow result",
        "description": "Returns the final result of an asynchronously started workflow, if available",
        "parameters": [
          {
            "in": "path",
            "name": "handler_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Workflow run identifier returned from the no-wait run endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Result is available",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "description": "Workflow result value"
                    }
                  },
                  "required": [
                    "result"
                  ]
                }
              }
            }
          },
          "202": {
            "description": "Result not ready yet",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Handler not found"
          },
          "500": {
            "description": "Error computing result"
          }
        }
      }
    },
    "/events/{handler_id}": {
      "get": {
        "summary": "Stream workflow events",
        "description": "Streams events produced by a workflow execution. Events are emitted as\nnewline-delimited JSON by default, or as Server-Sent Events when `sse=true`.\nEvent data is formatted according to llama-index's json serializer. For\npydantic serializable python types, it returns:\n{\n  \"__is_pydantic\": True,\n  \"value\": <pydantic serialized value>,\n  \"qualified_name\": <python path to pydantic class>\n}\n",
        "parameters": [
          {
            "in": "path",
            "name": "handler_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Identifier returned from the no-wait run endpoint."
          },
          {
            "in": "query",
            "name": "sse",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "If true, stream as text/event-stream instead of NDJSON."
          }
        ],
        "responses": {
          "200": {
            "description": "Streaming started",
            "content": {
              "application/x-ndjson": {
                "schema": {
                  "type": "string",
                  "description": "Newline-delimited JSON stream of events."
                }
              },
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "Server-Sent Events stream of event data."
                }
              }
            }
          },
          "404": {
            "description": "Handler not found"
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health check",
        "description": "Returns the server health status.",
        "responses": {
          "200": {
            "description": "Successful health check",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "healthy"
                    }
                  },
                  "required": [
                    "status"
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}