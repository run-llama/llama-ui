{
  "openapi": "3.0.0",
  "info": {
    "title": "Workflows API",
    "version": "2.7.0"
  },
  "components": {
    "schemas": {
      "Handler": {
        "type": "object",
        "properties": {
          "handler_id": {
            "type": "string"
          },
          "workflow_name": {
            "type": "string"
          },
          "run_id": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": [
              "running",
              "completed",
              "failed",
              "cancelled"
            ]
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "result": {
            "description": "Workflow result value"
          }
        },
        "required": [
          "handler_id",
          "workflow_name",
          "status",
          "started_at"
        ]
      },
      "HandlersList": {
        "type": "object",
        "properties": {
          "handlers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Handler"
            }
          }
        },
        "required": [
          "handlers"
        ]
      }
    }
  },
  "paths": {
    "/workflows": {
      "get": {
        "summary": "List workflows",
        "description": "Returns the list of registered workflow names.",
        "responses": {
          "200": {
            "description": "List of workflows",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "workflows": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "workflows"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/workflows/{name}/run": {
      "post": {
        "summary": "Run workflow (wait)",
        "description": "Runs the specified workflow synchronously and returns the final result.\nThe request body may include an optional serialized start event, an optional\ncontext object, and optional keyword arguments passed to the workflow run.\n",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Registered workflow name."
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "start_event": {
                    "type": "object",
                    "description": "Plain JSON object representing the start event (e.g., {\"message\": \"...\"})."
                  },
                  "context": {
                    "type": "object",
                    "description": "Serialized workflow Context."
                  },
                  "handler_id": {
                    "type": "string",
                    "description": "Workflow handler identifier to continue from a previous completed run."
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional keyword arguments for the workflow."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workflow completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Handler"
                }
              }
            }
          },
          "400": {
            "description": "Invalid start_event payload"
          },
          "404": {
            "description": "Workflow or handler identifier not found"
          },
          "500": {
            "description": "Error running workflow or invalid request body"
          }
        }
      }
    },
    "/workflows/{name}/run-nowait": {
      "post": {
        "summary": "Run workflow (no-wait)",
        "description": "Starts the specified workflow asynchronously and returns a handler identifier\nwhich can be used to query results or stream events.\n",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Registered workflow name."
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "start_event": {
                    "type": "object",
                    "description": "Plain JSON object representing the start event (e.g., {\"message\": \"...\"})."
                  },
                  "context": {
                    "type": "object",
                    "description": "Serialized workflow Context."
                  },
                  "handler_id": {
                    "type": "string",
                    "description": "Workflow handler identifier to continue from a previous completed run."
                  },
                  "kwargs": {
                    "type": "object",
                    "description": "Additional keyword arguments for the workflow."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workflow started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Handler"
                }
              }
            }
          },
          "400": {
            "description": "Invalid start_event payload"
          },
          "404": {
            "description": "Workflow or handler identifier not found"
          }
        }
      }
    },
    "/workflows/{name}/schema": {
      "get": {
        "summary": "Get JSON schema for start event",
        "description": "Gets the JSON schema of the start and stop events from the specified workflow and returns it under \"start\" (start event) and \"stop\" (stop event)\n",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Registered workflow name."
          }
        ],
        "requestBody": {
          "required": false
        },
        "responses": {
          "200": {
            "description": "JSON schema successfully retrieved for start event",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "start": {
                      "description": "JSON schema for the start event"
                    },
                    "stop": {
                      "description": "JSON schema for the stop event"
                    }
                  },
                  "required": [
                    "start",
                    "stop"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Workflow not found"
          },
          "500": {
            "description": "Error while getting the JSON schema for the start or stop event"
          }
        }
      }
    },
    "/results/{handler_id}": {
      "get": {
        "summary": "Get workflow result",
        "description": "Returns the final result of an asynchronously started workflow, if available",
        "parameters": [
          {
            "in": "path",
            "name": "handler_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Workflow run identifier returned from the no-wait run endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "Result is available",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Handler"
                }
              }
            }
          },
          "202": {
            "description": "Result not ready yet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Handler"
                }
              }
            }
          },
          "404": {
            "description": "Handler not found"
          },
          "500": {
            "description": "Error computing result",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/events/{handler_id}": {
      "get": {
        "summary": "Stream workflow events",
        "description": "Streams events produced by a workflow execution. Events are emitted as\nnewline-delimited JSON by default, or as Server-Sent Events when `sse=true`.\nEvent data is formatted according to llama-index's json serializer. For\npydantic serializable python types, it returns:\n{\n  \"__is_pydantic\": True,\n  \"value\": <pydantic serialized value>,\n  \"qualified_name\": <python path to pydantic class>\n}\n\nEvent queue is mutable. Elements are added to the queue by the workflow handler, and removed by any consumer of the queue.\nThe queue is protected by a lock that is acquired by the consumer, so only one consumer of the queue at a time is allowed.\n",
        "parameters": [
          {
            "in": "path",
            "name": "handler_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Identifier returned from the no-wait run endpoint."
          },
          {
            "in": "query",
            "name": "sse",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "If false, as NDJSON instead of Server-Sent Events."
          },
          {
            "in": "query",
            "name": "include_internal",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "If true, include internal workflow events (e.g., step state changes)."
          },
          {
            "in": "query",
            "name": "acquire_timeout",
            "required": false,
            "schema": {
              "type": "number",
              "default": 1
            },
            "description": "Timeout for acquiring the lock to iterate over the events."
          }
        ],
        "responses": {
          "200": {
            "description": "Streaming started",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "object",
                  "description": "Server-Sent Events stream of event data.",
                  "properties": {
                    "value": {
                      "type": "object",
                      "description": "The event value."
                    },
                    "qualified_name": {
                      "type": "string",
                      "description": "The qualified name of the event."
                    }
                  },
                  "required": [
                    "value",
                    "qualified_name"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Handler not found"
          }
        }
      },
      "post": {
        "summary": "Send event to workflow",
        "description": "Sends an event to a running workflow's context.",
        "parameters": [
          {
            "in": "path",
            "name": "handler_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Workflow handler identifier."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "event": {
                    "type": "string",
                    "description": "Serialized event in JSON format.",
                    "examples": {
                      "type": "event_name",
                      "data": {
                        "key": "value"
                      }
                    }
                  },
                  "step": {
                    "type": "string",
                    "description": "Optional target step name. If not provided, event is sent to all steps."
                  }
                },
                "required": [
                  "event"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "sent"
                      ]
                    }
                  },
                  "required": [
                    "status"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid event data"
          },
          "404": {
            "description": "Handler not found"
          },
          "409": {
            "description": "Workflow already completed"
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health check",
        "description": "Returns the server health status.",
        "responses": {
          "200": {
            "description": "Successful health check",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "healthy"
                    }
                  },
                  "required": [
                    "status"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/handlers": {
      "get": {
        "summary": "Get handlers",
        "description": "Returns all workflow handlers.",
        "responses": {
          "200": {
            "description": "List of handlers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HandlersList"
                }
              }
            }
          }
        }
      }
    },
    "/handlers/{handler_id}/cancel": {
      "post": {
        "summary": "Stop and delete handler",
        "description": "Stops a running workflow handler by cancelling its tasks. Optionally removes the\nhandler from the persistence store if purge=true.\n",
        "parameters": [
          {
            "in": "path",
            "name": "handler_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Workflow handler identifier."
          },
          {
            "in": "query",
            "name": "purge",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "If true, also deletes the handler from the store, otherwise updates the status to cancelled."
          }
        ],
        "responses": {
          "200": {
            "description": "Handler cancelled and deleted or cancelled only",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "deleted",
                        "cancelled"
                      ]
                    }
                  },
                  "required": [
                    "status"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Handler not found"
          }
        }
      }
    },
    "/workflows/{name}/representation": {
      "get": {
        "summary": "Get the representation of the workflow",
        "description": "Get the representation of the workflow as a directed graph in JSON format\n",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Registered workflow name."
          }
        ],
        "requestBody": {
          "required": false
        },
        "responses": {
          "200": {
            "description": "JSON representation successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "graph": {
                      "description": "the elements of the JSON representation of the workflow"
                    }
                  },
                  "required": [
                    "graph"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Workflow not found"
          },
          "500": {
            "description": "Error while getting JSON workflow representation"
          }
        }
      }
    },
    "/workflows/{name}/events": {
      "get": {
        "summary": "List workflow events",
        "description": "Returns the list of registered workflow event schemas.",
        "parameters": [
          {
            "name": "workflow_name",
            "in": "query",
            "description": "Name of the workflow to list events for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of workflow event schemas",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "events": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "schema": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "name",
                          "schema"
                        ]
                      }
                    }
                  },
                  "required": [
                    "events"
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}